[
    {
        "id": "53fca2ec.10a01c",
        "type": "mqtt out",
        "z": "e754637a.afc6f",
        "name": "",
        "topic": "3.0/LOC/nodered/LS/MGQ",
        "qos": "",
        "retain": "",
        "broker": "9dcf57ce.69a9e8",
        "x": 480,
        "y": 440,
        "wires": []
    },
    {
        "id": "9f833ea3.c1d5d",
        "type": "inject",
        "z": "e754637a.afc6f",
        "name": "send MGQ for controller info",
        "topic": "",
        "payload": "[1,1]",
        "payloadType": "bin",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 180,
        "y": 440,
        "wires": [
            [
                "53fca2ec.10a01c"
            ]
        ]
    },
    {
        "id": "795ceb6a.ccc584",
        "type": "mqtt in",
        "z": "e754637a.afc6f",
        "name": "",
        "topic": "#",
        "qos": "2",
        "datatype": "auto",
        "broker": "9dcf57ce.69a9e8",
        "x": 90,
        "y": 780,
        "wires": [
            [
                "ab82dd8b.53e29"
            ]
        ]
    },
    {
        "id": "ab82dd8b.53e29",
        "type": "function",
        "z": "e754637a.afc6f",
        "name": "decode MQTT message",
        "func": "function sliceBuf(buf, start, end) {\n    return buf.slice(start,end).readInt32BE();\n}\n\n\nif (msg.topic.endsWith(\"MGR\")){\n    if (msg.payload[0]== 2 && msg.payload[1]== 1){\n        var bytes = msg.payload.slice(4,68)\n        var result = \"\"\n        for (var i = 0; i < bytes.length; i++) {\n            result += String.fromCharCode(parseInt(bytes[i]));\n        }\n        node.warn(\"Controller name: \" + result)\n        bytes = msg.payload.slice(68,84)\n        result = \"\"\n        for (i = 0; i < bytes.length; i++) {\n            result += String.fromCharCode(parseInt(bytes[i]));\n        }\n        node.warn(\"API version: \" + result)\n        bytes = msg.payload.slice(84,100)\n        result = \"\"\n        for (i = 0; i < bytes.length; i++) {\n            result += String.fromCharCode(parseInt(bytes[i]));\n        }\n        node.warn(\"Controller version: \" + result)\n    }\n    else{\n        if (msg.payload[0]== 2 && msg.payload[1]== 7){\n        bytes = msg.payload.slice(4,6)\n        var qtdeVenues = bytes.readInt16BE()\n        result = \"\"\n        //node.warn(qtdeVenues)\n        for (i= 0; i < qtdeVenues; i++){\n                    bytes= msg.payload.slice(6+(16*i),22+(16*i))\n                    for (var j = 0; j < bytes.length; j++) {\n                        result += String.fromCharCode(parseInt(bytes[j]))\n                    }\n            node.warn(\"Venue name: \" + result)\n            result=\"\"\n            }\n        }\n    }\n}\n\nif (msg.topic.endsWith(\"PAR\")){\n    \n    //get timestamp\n    msg.sliced = sliceBuf(msg.payload,4,8);\n    var dt = new Date(msg.sliced * 1000);\n    //node.warn(\"Timestamp: \" + dt)\n    \n    //get AP mac address\n    var apMac = msg.payload[12].toString(16).padStart(2, '0') +\n    \":\" + msg.payload[13].toString(16).padStart(2, '0') +\n    \":\" + msg.payload[14].toString(16).padStart(2, '0') + \n    \":\" + msg.payload[15].toString(16).padStart(2, '0') + \n    \":\" + msg.payload[16].toString(16).padStart(2, '0') +\n    \":\" + msg.payload[17].toString(16).padStart(2, '0')\n    //node.warn(\"AP mac address: \" + apMac)\n    \n    //get radio band\n    if (msg.payload[18]===1){\n    //    node.warn(\"Band: 2.4Ghz\")\n    }\n    else{\n    //    node.warn(\"Band: 5Ghz\")    \n    }\n    \n    //get air utilization\n    //node.warn(\"Air Utilization: \" + msg.payload[19] + \"%\")\n    \n    //get number of clients\n    var numClient = msg.payload.slice(20,22).readInt16BE();\n    global.set(\"numClient\", numClient);\n    //node.warn(\"Number of clients: \" + numClient)\n\n    //get mac address, RSSI and SNR for each client\n    var i;\n    var sumRssi = 0;\n    var avgRssi = 0;\n    for (i = 0; i < numClient; i++) {\n        var clientMac = msg.payload[22+(11*i)].toString(16).padStart(2, '0') +\n        \":\" + msg.payload[23+(11*i)].toString(16).padStart(2, '0') +\n        \":\" + msg.payload[24+(11*i)].toString(16).padStart(2, '0') +\n        \":\" + msg.payload[25+(11*i)].toString(16).padStart(2, '0') +\n        \":\" + msg.payload[26+(11*i)].toString(16).padStart(2, '0') +\n        \":\" + msg.payload[27+(11*i)].toString(16).padStart(2, '0')\n        var rssi1 = msg.payload[29+(11*i)]-256;\n        var rssi2 = msg.payload[30+(11*i)]-256;\n        var rssi3 = msg.payload[31+(11*i)]-256;\n        var snr = msg.payload[32+(11*i)]-256;\n        //node.warn(\"Client mac address: \" + clientMac)\n        //node.warn(\"RSSI-1: \" + rssi1)\n        //node.warn(\"RSSI-2: \" + rssi2)        \n        //node.warn(\"RSSI-3: \" + rssi3)\n    //    node.warn(\"SNR: \" + snr)\n        sumRssi = sumRssi + rssi1 + rssi2;\n    }\n    avgRssi = sumRssi / (numClient * -2)\n    global.set(\"avgRssi\", avgRssi);\n    //node.warn(\"Average RSSI: \" + avgRssi)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 780,
        "wires": [
            [
                "1ed6d675.90272a"
            ]
        ]
    },
    {
        "id": "1ed6d675.90272a",
        "type": "debug",
        "z": "e754637a.afc6f",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 630,
        "y": 780,
        "wires": []
    },
    {
        "id": "c078143b.edbf78",
        "type": "mqtt out",
        "z": "e754637a.afc6f",
        "name": "",
        "topic": "3.0/LOC/nodered/LS/MGQ",
        "qos": "",
        "retain": "",
        "broker": "9dcf57ce.69a9e8",
        "x": 480,
        "y": 500,
        "wires": []
    },
    {
        "id": "cf9da448.8293c8",
        "type": "inject",
        "z": "e754637a.afc6f",
        "name": "send MGQ for venue info",
        "topic": "",
        "payload": "[1,7]",
        "payloadType": "bin",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "c078143b.edbf78"
            ]
        ]
    },
    {
        "id": "9c56d52a.e32168",
        "type": "mqtt out",
        "z": "e754637a.afc6f",
        "name": "",
        "topic": "3.0/LOC/nodered/LS/PAQ",
        "qos": "",
        "retain": "",
        "broker": "9dcf57ce.69a9e8",
        "x": 470,
        "y": 560,
        "wires": []
    },
    {
        "id": "8683b6af.f91178",
        "type": "inject",
        "z": "e754637a.afc6f",
        "name": "send PAQ for 2.4GHz",
        "topic": "",
        "payload": "[3,1,0,7,10,0,1,1,0,0,0]",
        "payloadType": "bin",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "9c56d52a.e32168"
            ]
        ]
    },
    {
        "id": "c969948b.3aff28",
        "type": "mqtt out",
        "z": "e754637a.afc6f",
        "name": "",
        "topic": "3.0/LOC/nodered/LS/PAQ",
        "qos": "",
        "retain": "",
        "broker": "9dcf57ce.69a9e8",
        "x": 470,
        "y": 620,
        "wires": []
    },
    {
        "id": "dd7bee63.58ae",
        "type": "inject",
        "z": "e754637a.afc6f",
        "name": "send PAQ for 5GHz",
        "topic": "",
        "payload": "[3,1,0,7,10,0,1,2,0,0,0]",
        "payloadType": "bin",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 150,
        "y": 620,
        "wires": [
            [
                "c969948b.3aff28"
            ]
        ]
    },
    {
        "id": "d3f147d0.b5c4a8",
        "type": "comment",
        "z": "e754637a.afc6f",
        "name": "MQTT outbound flows from local mosquitto",
        "info": "",
        "x": 210,
        "y": 320,
        "wires": []
    },
    {
        "id": "a7a5415a.30185",
        "type": "comment",
        "z": "e754637a.afc6f",
        "name": "MQTT inbound flow to local mosquitto",
        "info": "",
        "x": 190,
        "y": 700,
        "wires": []
    },
    {
        "id": "1748168c.1eca99",
        "type": "comment",
        "z": "e754637a.afc6f",
        "name": "The inject nodes contain the byte payload for each MGQ or PAQ message",
        "info": "",
        "x": 300,
        "y": 360,
        "wires": []
    },
    {
        "id": "d53314.bdc57cf",
        "type": "comment",
        "z": "e754637a.afc6f",
        "name": "The \"mqtt out\" nodes contain the local mosquitto ip address and topic",
        "info": "",
        "x": 290,
        "y": 400,
        "wires": []
    },
    {
        "id": "4e6bac3f.a3aa94",
        "type": "comment",
        "z": "e754637a.afc6f",
        "name": "The \"mqtt in\" node subscribes to all topics \"#\" in the local mosquitto",
        "info": "",
        "x": 280,
        "y": 740,
        "wires": []
    },
    {
        "id": "ea35a8ec.e7af48",
        "type": "comment",
        "z": "e754637a.afc6f",
        "name": "read file \"how to install the local mosquitto broker\" for details",
        "info": "",
        "x": 617,
        "y": 321,
        "wires": []
    },
    {
        "id": "9dcf57ce.69a9e8",
        "type": "mqtt-broker",
        "z": "",
        "name": "",
        "broker": "A.B.C.D",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    }
]