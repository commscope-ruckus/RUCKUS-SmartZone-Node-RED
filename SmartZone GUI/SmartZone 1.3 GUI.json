[{"id":"fa406d54.01521","type":"inject","z":"4486a96.bed6f58","name":"","topic":"","payload":"","payloadType":"date","repeat":"3600","crontab":"","once":true,"onceDelay":"1","x":130,"y":80,"wires":[["fa38c313.0ceb9"]]},{"id":"89fb0592.2fee68","type":"http request","z":"4486a96.bed6f58","name":"","method":"POST","ret":"obj","paytoqs":false,"url":"","tls":"bfb7054f.38d938","persist":false,"proxy":"","authType":"","x":790,"y":80,"wires":[["1d3156de.c821a9"]]},{"id":"fa38c313.0ceb9","type":"function","z":"4486a96.bed6f58","name":"Get service ticket/set variables","func":"//Set local timezone offset for adjusting it in the \"Initiate session\" in this branch of the flow.\n//The value of tzOffset is a positiive or negative number in relation UTC to your local time offset\n//i.e. BST wll return -60 mins as UTC is 60 mins behind BST\nvar currentDate = new Date();\nvar tzOffset = currentDate.getTimezoneOffset();\n\n//if returned offset is positive number convert to negative as it needs to be subtracted from SZ timestamps\nif(tzOffset > 0){\nflow.set(\"tzOffsetAdjust\", -Math.abs(tzOffset)+120);\n}\n\n//if returned offset is negative number convert to positive as it needs to be added to SZ timestamps\nif(tzOffset < 0){\n//flow.set(\"tzOffsetAdjust\", -tzOffset);\nflow.set(\"tzOffsetAdjust\", Math.abs(tzOffset)+120);\n}\nnode.warn(flow.get(\"tzOffsetAdjust\"))\n//flow.set(\"tzOffsetAdjust\", 0);\n\n//Set general variables\nflow.set(\"szAddress\", \"https://10.0.0.32:8443\");\nflow.set(\"loginName\", \"admin\");\nflow.set(\"loginPass\", \"ruckus123!\");\n\n//Get a new service token\nmsg.url = flow.get(\"szAddress\").concat(\"/wsg/api/public/v9_0/serviceTicket\");\n\nmsg.headers = {};\nmsg.headers[\"Content-Type\"]=\"application/json;charset=UTF-8\";\n\nmsg.payload = {\n    \"username\": flow.get(\"loginName\"),\n    \"password\": flow.get(\"loginPass\")\n};\nreturn msg;","outputs":1,"noerr":0,"x":450,"y":80,"wires":[["89fb0592.2fee68"]]},{"id":"1d3156de.c821a9","type":"function","z":"4486a96.bed6f58","name":"Save service ticket","func":"var response = msg.payload;\nvar responseCode = msg.statusCode\n\n//Check that SZ HTTP connection and login was succesful\n//If not send debug warning to console and debug\nif (responseCode != 200) {\n    node.warn([\"SZ connection fail with HTTP response\", responseCode]);\nreturn;\n}\n\nelse {\n    flow.set(\"vSZSessionCookie\", msg.responseCookies.JSESSIONID.value);\n    flow.set(\"serviceTicket\", response.serviceTicket);\n}\nreturn msg;","outputs":1,"noerr":0,"x":1150,"y":80,"wires":[["eeef0c46.c7412"]]},{"id":"d085246f.48ff18","type":"http request","z":"4486a96.bed6f58","name":"","method":"POST","ret":"obj","paytoqs":false,"url":"","tls":"49cfd7e5.17fbf8","persist":false,"proxy":"","authType":"","x":1750,"y":80,"wires":[[]]},{"id":"eeef0c46.c7412","type":"function","z":"4486a96.bed6f58","name":"Initiate Session","func":"//This first section deals with automaticaly setting the local timezone offset in  \"timeZoneUtcOffset\" from UTC.\n//It uses the daylight savings offset calculated in the node \"Get service ticket/set variables\".\n\n//Set the flag \"negoffSet\" default value to false i.e. it is a positive number\ncontext.set(\"negoffSet\", false);\n\nvar offSet = (flow.get(\"tzOffsetAdjust\") * 60); //convert the returned minute value variable into seconds\n\n//If returned offSet valeu is negative then convert it to positiive to remove the \"-\" sign and flag it to be added back later\nif(offSet < 0){\noffSet = Math.abs(offSet);\ncontext.set(\"negoffSet\", true);\n}\n\n//See node \"Set System Info\" for info on how the calcs below work\nvar hour = Math.floor(offSet / (60*60));\n      offSet -= hour   * (60*60);\n\nvar minute = Math.floor(offSet / (60));\n      offSet -= minute * (60);\n\nvar offSetFormatted = (hour.toString().padStart(2, '0')+\":\"+minute.toString().padStart(2, '0'));\n\n//If the original offSet value was negative then ada \"-\" prefix to hh:mm formatted offSet value, else add a \"+\"\nif(context.get(\"negoffSet\") === true){\n    offSetFormatted = \"-\".concat(offSetFormatted);\n}\nelse {\n    offSetFormatted = \"+\".concat(offSetFormatted);\n}\n\n//Open a session to SZ\nmsg.url = flow.get(\"szAddress\").concat(\"/wsg/api/public/v9_0/session\");\n\nmsg.headers = {};\n    msg.headers[\"Content-Type\"]=\"application/json;charset=UTF-8\";\n    msg.headers[\"Cookie\"]=\"JSESSIONID=\"+flow.get(\"vSZSessionCookie\");\n\nmsg.payload = {\n    \"username\": flow.get(\"loginName\"),\n    \"password\": flow.get(\"loginPass\"),\n    \"timeZoneUtcOffset\": offSetFormatted\n};\n\nreturn msg;","outputs":1,"noerr":0,"x":1440,"y":80,"wires":[["d085246f.48ff18"]]},{"id":"94688554.70fc58","type":"function","z":"4486a96.bed6f58","name":"Get SZ System Info","func":"//API call to get SZ System Info \nmsg.url = flow.get(\"szAddress\").concat(\"/wsg/api/public/v9_0/controller?serviceTicket=\");\nmsg.url = msg.url.concat(flow.get(\"serviceTicket\"));\n\nmsg.headers = {};\n    msg.headers[\"Content-Type\"]=\"application/json;charset=UTF-8\";\n    msg.headers[\"Cookie\"]=\"JSESSIONID=\"+flow.get(\"vSZSessionCookie\");\n\nreturn msg;","outputs":1,"noerr":0,"x":410,"y":180,"wires":[["576400d9.05b35"]]},{"id":"af2213ab.9c2da","type":"ui_table","z":"4486a96.bed6f58","group":"3bae1f9c.71be1","name":"SmartZone Sys Info","order":1,"width":"26","height":"1","columns":[{"field":"hostName","title":"Host Name","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"model","title":"Model","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"version","title":"Software Version","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"upTime","title":"System Up Time","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}}],"outputs":0,"cts":false,"x":1720,"y":180,"wires":[]},{"id":"576400d9.05b35","type":"http request","z":"4486a96.bed6f58","name":"","method":"GET","ret":"obj","paytoqs":false,"url":"","tls":"49cfd7e5.17fbf8","persist":false,"proxy":"","authType":"","x":790,"y":180,"wires":[["d3739256.98869"]]},{"id":"d3739256.98869","type":"function","z":"4486a96.bed6f58","name":"Set System Info","func":"var controllerVersion = (msg.payload.list[0].version);\nvar model = (msg.payload.list[0].model);\nvar hostName = (msg.payload.list[0].hostName);\n\n//Take the SZ uptime in seconds and convert to Days, Hours, Minutes\n//1. Get the SZ uptime in seconds\nvar upTimeSec = (msg.payload.list[0].uptimeInSec);\n\n//2. To work out uptime Days value take the uptime seconds and divide by 86400, then use Math.floor to round it down to nearest whole number\n//Then take the days value, multiply by it by 3600 and subract that from the inital total uptime using -= to carry over Hours and \n//Minutes left in seconds.\n//Repeat similar process to get Hours value and then again for Minute value\nvar days     = Math.floor(upTimeSec / (24*60*60));\nupTimeSec -= days    * (24*60*60);\n\nvar hours    = Math.floor(upTimeSec / (60*60));\nupTimeSec -= hours   * (60*60);\n  \nvar minutes  = Math.floor(upTimeSec / (60));\nupTimeSec -= minutes * (60);\n  \n//3. To have leading 0 when required convert the numbers to strings and use padStart() to enforce a minimum number of digits\nvar upTimeFormatted = ((0<days)?(days+\"d, \"):\"\")+hours.toString().padStart(2, '0')+\"h, \"+minutes.toString().padStart(2, '0')+\"m\";\n\nvar sysInfo = [{\"model\": model, \"hostName\": hostName, \"version\": controllerVersion, \"upTime\": upTimeFormatted}];\n\nmsg.payload = sysInfo;\nreturn msg;","outputs":1,"noerr":0,"x":1140,"y":180,"wires":[["af2213ab.9c2da"]]},{"id":"84bcf801.d19468","type":"inject","z":"4486a96.bed6f58","name":"","topic":"","payload":"","payloadType":"date","repeat":"30","crontab":"","once":true,"onceDelay":"2","x":130,"y":180,"wires":[["94688554.70fc58"]]},{"id":"f8ab2f5e.d0326","type":"comment","z":"4486a96.bed6f58","name":"Get SZ service ticket and open a session to it","info":"","x":210,"y":40,"wires":[]},{"id":"4b52106f.409ff","type":"comment","z":"4486a96.bed6f58","name":"Get SZ System info every 30 seconds to update time","info":"","x":230,"y":140,"wires":[]},{"id":"fb43c491.7a00c8","type":"comment","z":"4486a96.bed6f58","name":"Populate WLAN list table for selected Zone","info":"","x":940,"y":820,"wires":[]},{"id":"53bdd6b.4f67628","type":"comment","z":"4486a96.bed6f58","name":"Populate Traffic graph with selected WLAN","info":"","x":700,"y":1480,"wires":[]},{"id":"760bdf11.7167c","type":"comment","z":"4486a96.bed6f58","name":"Populate Client Count graph with selected WLAN","info":"","x":660,"y":1640,"wires":[]},{"id":"a2b0d7a3.5f27d8","type":"comment","z":"4486a96.bed6f58","name":"Selecting a WLAN in table triggers other dependant flows","info":"","x":250,"y":980,"wires":[]},{"id":"d7c21c07.1b3b6","type":"comment","z":"4486a96.bed6f58","name":"Get WLAN State / Change it","info":"","x":620,"y":1200,"wires":[]},{"id":"40d4aa6c.0be1d4","type":"comment","z":"4486a96.bed6f58","name":"Clear graph on change of WLAN","info":"","x":970,"y":1520,"wires":[]},{"id":"d574f084.eea5f","type":"comment","z":"4486a96.bed6f58","name":"Clear graph on change of WLAN","info":"","x":970,"y":1680,"wires":[]},{"id":"db331a9d.4ae208","type":"comment","z":"4486a96.bed6f58","name":"Populate Zone list table for selected Domain","info":"","x":870,"y":480,"wires":[]},{"id":"48154a8d.5d39b4","type":"comment","z":"4486a96.bed6f58","name":"Populate Domain list table","info":"","x":830,"y":260,"wires":[]},{"id":"693279f4.bf8e48","type":"comment","z":"4486a96.bed6f58","name":"Populate AP Health Status for selected Zone","info":"","x":570,"y":580,"wires":[]},{"id":"9ebf577f.9229b8","type":"comment","z":"4486a96.bed6f58","name":"Populate AP Zone Version for selected Zone","info":"","x":570,"y":680,"wires":[]},{"id":"3b8f1e9.67900e2","type":"comment","z":"4486a96.bed6f58","name":"Change SSID Name functions","info":"","x":1240,"y":1020,"wires":[]},{"id":"7986336.377ddcc","type":"comment","z":"4486a96.bed6f58","name":"Clear Client list table on change of WLAN","info":"","x":1000,"y":1380,"wires":[]},{"id":"1fce0038.bd53f","type":"ui_table","z":"4486a96.bed6f58","group":"3bae1f9c.71be1","name":"WLANs List Table","order":8,"width":"10","height":"4","columns":[{"field":"name","title":"WLAN name","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"ssid","title":"SSID name","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}}],"outputs":1,"cts":true,"x":154.2857208251953,"y":1031.4285411834717,"wires":[["33ca5bc8.2d0274","a95c7e1b.5275"]]},{"id":"3a910167.58844e","type":"function","z":"4486a96.bed6f58","name":"Get WLAN Traffic","func":"//If no WLAN is selected then exit without processing\nif(flow.get(\"wlanID\") === null){\n    return;\n}\n\n//Check to see if the msg has come from Inject node rather than Set Flow Variables node.\n//If it has then update time using the Inject msg.payload timestamp (else the Set Flow Variable time will be used).\nif(Number.isInteger(msg.payload)) {\n    flow.set(\"currentTime\",msg.payload);\n}\n\n//Check if a different WLAN entry has been selected in the WLAN table.\n//If so clear the traffic table by sending an empty array out port 2.\n//checkwlanID is the variable used to track the wlanID so it can be compared to incoming value.\nif (flow.get(\"wlanID\") != context.get(\"checkwlanID\")) {\n        msg.payload = [];\n        node.send([null,msg]);\n    }\n//Update checkwlanID variable to be latest wlanID value for next time it needs to be checked.\ncontext.set(\"checkwlanID\", flow.get(\"wlanID\"));\n\nmsg.url = flow.get(\"szAddress\").concat(\"/wsg/api/public/v9_0/trafficAnalysis/line/usage/wlan?serviceTicket=\");\nmsg.url = msg.url.concat(flow.get(\"serviceTicket\"));\n\nmsg.headers = {};\n    msg.headers[\"Content-Type\"]=\"application/json;charset=UTF-8\";\n    msg.headers[\"Cookie\"]=\"JSESSIONID=\"+flow.get(\"vSZSessionCookie\");\n\nmsg.payload = {\n    \"filters\":\n    [{\"type\":\"DOMAIN\",\"value\":flow.get(\"domainID\")}],\n\t\"extraFilters\":[{\"type\":\"WLAN\",\"value\":flow.get(\"wlanID\")}],\n\t\"extraNotFilters\":[{\"type\":\"MONITORINGENABLED\",\"value\":\"true\"}],\n\t\"attributes\":[\"Bytes\",\"tx+rx\"],\n\t\"extraTimeRange\":{\n\t    \"start\":flow.get(\"currentTime\") - 3600000, //Current UTC time minus 3 minutes in ms to get data\n\t    \"end\":flow.get(\"currentTime\"),\n\t    \"interval\": 180000  //3 minutes in ms\n\t   },\n\t\"options\":{},\n\t\"limit\":20,\n\t\"page\":1\n}\n\n//Send Traffic payload request out of port 1      \nreturn [msg,null];","outputs":2,"noerr":0,"x":670,"y":1520,"wires":[["276b0079.56b54"],["6663629a.0d88ac"]],"outputLabels":["Send Request","Send Clear Traffic Table"]},{"id":"eaeb54cf.807038","type":"function","z":"4486a96.bed6f58","name":"Get Client Count","func":"//If no WLAN is selected then exit without processing\nif(flow.get(\"wlanID\") === null){\n    return;\n}\n\n//Check if a different WLAN entry has been selected in the WLAN table.\n//If so clear the client count table by sending an empty array out port 2.\n//checkwlanID is the variable used to track the wlanID so it can be compared to incoming value.\nif (flow.get(\"wlanID\") != context.get(\"checkwlanID\")) {\n        msg.payload = [];\n        node.send([null,msg]);\n    }\n//Update checkwlanID variable to be latest wlanID value for next time it needs to be checked.\ncontext.set(\"checkwlanID\", flow.get(\"wlanID\"));\n\nmsg.url = flow.get(\"szAddress\").concat(\"/wsg/api/public/v9_0/trafficAnalysis/line/aggclients/wlan?serviceTicket=\");\nmsg.url = msg.url.concat(flow.get(\"serviceTicket\"));\n\nmsg.headers = {};\n    msg.headers[\"Content-Type\"]=\"application/json;charset=UTF-8\";\n    msg.headers[\"Cookie\"]=\"JSESSIONID=\"+flow.get(\"vSZSessionCookie\");\n\nmsg.payload = {\n    \"filters\":\n    [{\"type\":\"DOMAIN\",\"value\":flow.get(\"domainID\")}],\n\t\"extraFilters\":[{\"type\":\"WLAN\",\"value\":flow.get(\"wlanID\")}],\n\t\"extraNotFilters\":[{\"type\":\"MONITORINGENABLED\",\"value\":\"true\"}],\n\t\"attributes\":[\"Bytes\",\"tx+rx\"],\n\t\"extraTimeRange\":{\n\t    \"start\":flow.get(\"currentTime\") - 3600000, //Current time minus 1Hr to get data points\n\t    \"end\":flow.get(\"currentTime\"),\n\t    \"interval\": 180000 //3 minutes\n\t    },\n\t\"options\":{},\n\t\"limit\":20,\n\t\"page\":1\n}\nreturn [msg,null];","outputs":2,"noerr":0,"x":670,"y":1680,"wires":[["88ad8c77.4c129"],["e7a28f75.70528"]],"outputLabels":["Send Request","Send Clear Client Graph"]},{"id":"33ca5bc8.2d0274","type":"ui_text","z":"4486a96.bed6f58","group":"3bae1f9c.71be1","order":5,"width":"10","height":"1","name":"Selected WLAN & SSID text","label":"<font size = 3><font color=grey>Selected WLAN:  </font>","format":"<font size =4><font color=red>{{msg.payload.name}}</font>","layout":"row-left","x":440,"y":1020,"wires":[],"info":"This has not function apart from putting  text above the WLAN / SSID list"},{"id":"f633865e.2f9808","type":"function","z":"4486a96.bed6f58","name":"Get Schedule Status","func":"//If no WLAN is selected then exit without processing\nif(flow.get(\"wlanID\") === null){\n    return;\n}\n\nmsg.url = flow.get(\"szAddress\").concat(\"/wsg/api/public/v9_0/rkszones/\"+flow.get(\"zoneID\")+\"/wlans/\"+flow.get(\"wlanID\")+\"?serviceTicket=\")\nmsg.url = msg.url.concat(flow.get(\"serviceTicket\"));\n\nmsg.headers = {};\n    msg.headers[\"Content-Type\"]=\"application/json;charset=UTF-8\";\n    msg.headers[\"Cookie\"]=\"JSESSIONID=\"+flow.get(\"vSZSessionCookie\");\n\nmsg.payload = {};\n\nreturn msg;","outputs":1,"noerr":0,"x":620,"y":1240,"wires":[["368ed0b3.cd394"]]},{"id":"df715a35.325978","type":"function","z":"4486a96.bed6f58","name":"Get Client list","func":"//If no WLAN is selected then exit without processing\nif(flow.get(\"wlanID\") === null){\n    return;\n}\n\n//Check if a different WLAN entry has been selected in the WLAN table.\n//If so clear the Client List table by sending an empty array out port 2.\n//checkwlanID is the variable used to track the wlanID so it can be compared to incoming value.\nif (flow.get(\"wlanID\") != context.get(\"checkwlanID\")) {\n        msg.payload = [];\n        node.send([null,msg]);\n    }\n//Update checkwlanID variable to be latest wlanID value for next time it needs to be checked.\ncontext.set(\"checkwlanID\", flow.get(\"wlanID\"));\n\nmsg.url = flow.get(\"szAddress\").concat(\"/wsg/api/public/v9_0/query/client?serviceTicket=\");\nmsg.url = msg.url.concat(flow.get(\"serviceTicket\"));\n\nmsg.headers = {};\n    msg.headers[\"Content-Type\"]=\"application/json;charset=UTF-8\";\n    msg.headers[\"Cookie\"]=\"JSESSIONID=\"+flow.get(\"vSZSessionCookie\");\n\nmsg.payload = {\n    \"filters\":\n    [{\"type\":\"DOMAIN\",\"value\":flow.get(\"domainID\")}],\n\t\"extraFilters\":[{\"type\":\"WLAN\",\"value\":flow.get(\"wlanID\")}],\n\t\"attributes\":[\"*\"],\n\t\"limit\":500,\n\t\"page\":1,\n\t\"sortInfo\":{\"sortColumn\": \"clientMac\", \"dir\": \"ASC\"}\n}\n\n//Send Client List payload request out of port 1      \nreturn [msg,null];","outputs":2,"noerr":0,"x":660,"y":1380,"wires":[["883224b2.b3f5a8"],["17660754.9df249"]],"outputLabels":["Send Request","Send Clear Client List"]},{"id":"16e59c80.37c364","type":"function","z":"4486a96.bed6f58","name":"Send WLAN Info","func":"//Check if returned WLAN/SSID list = 0 and if so send text to this effect in the list box\nif (msg.payload.totalCount === 0) {\n    var noWlan = [{\"name\": \"No WLAN(s) in the selected AP Zone\", \"ssid\": \"No SSID(s) in the selected AP Zone\"}];\n    msg.topic = \"noWlan\"\n    msg.payload = noWlan;\n    node.send(msg);\n}\n//Else send the list of WLAN/SSID for the selected AP Zone to the list box\nelse {\n    msg.payload = msg.payload.list;\n}\nnode.send([msg]);\n\n//Now set the WLAN / SSID list sort order by WLAN Name (mane key) after 300ms to allow table to be populated first\nsetTimeout(function(){\n        msg.payload = {\n        \"command\":\"setSort\",\n        \"arguments\":[\n    [{\n\t\t\"column\":\"name\",\"dir\":\"asc\"\n\t},]\n    ],\n}\nnode.send([msg]);\n},300);\nreturn","outputs":1,"noerr":0,"x":1330,"y":860,"wires":[["1fce0038.bd53f"]]},{"id":"db18189.3c948e8","type":"function","z":"4486a96.bed6f58","name":"Clear all displayed data","func":"//Set key variables to Null value.\n\n//Do not reset Domain name & ID if the request has come from a click in the the Domain list\n//If it were reset here then when its clicked it would get reset again!\nif (msg.topic == \"name\") {\n    flow.set(\"zoneID\",null);\n    flow.set(\"zoneName\",null);\n    flow.set(\"wlanID\",null);\n    flow.set(\"wlanName\",null);\n    flow.set(\"ssidName\",null);\n    flow.set(\"apOnline\", null);\n    flow.set(\"apFlagged\", null);\n    flow.set(\"apOffline\", null);\n    flow.set(\"zoneFWver\", null);\n    //Set flags that historical traffic and client count data has not yet been sent to the respective graphs\n    flow.set(\"trafficHistoricalDatasent\", false);\n    flow.set(\"clientHistoricalDatasent\", false);\n}\n\n//Clear everything if request hasn't come from Domain list\nelse {\n    flow.set(\"domainID\",null);\n    flow.set(\"domainName\",null);\n    flow.set(\"zoneID\",null);\n    flow.set(\"zoneName\",null);\n    flow.set(\"wlanID\",null);\n    flow.set(\"wlanName\",null);\n    flow.set(\"ssidName\",null);\n    flow.set(\"apOnline\", null);\n    flow.set(\"apFlagged\", null);\n    flow.set(\"apOffline\", null);\n    flow.set(\"zoneFWver\", null);\n    //Set flags that historical traffic and client count data has not yet been sent to the respective graphs\n    flow.set(\"trafficHistoricalDatasent\", false);\n    flow.set(\"clientHistoricalDatasent\", false);\n}\n\n//If message came from the Refresh & Clear button then also clear the \"Last selected Domain entry\"\n//by sending an empty array out of port 1\nif (msg.topic == \"Refresh&Clear\") {\n    msg.payload = []\n    node.send([msg,null]);\n}\n\n//Send empty array to clear all the tables and graphs out of port 2\nmsg.payload = []\nreturn [null,msg];","outputs":2,"noerr":0,"x":174.2857208251953,"y":831.4285411834717,"wires":[["c6b32723.0ef988"],["1fce0038.bd53f","33ca5bc8.2d0274","16b5210c.f26d2f","6586c76b.9bcbb8","6663629a.0d88ac","e7a28f75.70528","322e4683.09047a","17660754.9df249","da6f6c8f.d603f"]],"outputLabels":["Clear last Domain if request from Refresh & Clear button","Clear all other Dashboard Data"]},{"id":"276b0079.56b54","type":"http request","z":"4486a96.bed6f58","name":"","method":"POST","ret":"obj","paytoqs":false,"url":"","tls":"bfb7054f.38d938","persist":false,"proxy":"","authType":"","x":950,"y":1480,"wires":[["2d37922f.d476fe"]]},{"id":"6663629a.0d88ac","type":"ui_chart","z":"4486a96.bed6f58","name":"WLAN Traffic Graph","group":"3bae1f9c.71be1","order":16,"width":13,"height":"6","label":"Selected WLAN Traffic in <B>MBytes</B> (3 minute aggregate datapoints)","chartType":"line","legend":"true","xformat":"HH:mm","interpolate":"bezier","nodata":"Waiting for Data or no Data...","dot":false,"ymin":"0","ymax":"","removeOlder":"4","removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#ff0000","#2ca02c","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":1,"x":1720,"y":1520,"wires":[[]]},{"id":"d5a4d729.8385c8","type":"inject","z":"4486a96.bed6f58","name":"Periodic Stat Update - 90 seconds","topic":"","payload":"","payloadType":"date","repeat":"90","crontab":"","once":false,"onceDelay":"2","x":200,"y":1600,"wires":[["3a910167.58844e","eaeb54cf.807038"]]},{"id":"88ad8c77.4c129","type":"http request","z":"4486a96.bed6f58","name":"","method":"POST","ret":"obj","paytoqs":false,"url":"","tls":"bfb7054f.38d938","persist":false,"proxy":"","authType":"","x":950,"y":1640,"wires":[["deeed94e.08d2a8"]]},{"id":"e7a28f75.70528","type":"ui_chart","z":"4486a96.bed6f58","name":"Client Count Graph","group":"3bae1f9c.71be1","order":17,"width":13,"height":"6","label":"Selected WLAN Client Count (3 minute aggregate datapoints)","chartType":"line","legend":"true","xformat":"HH:mm","interpolate":"bezier","nodata":"Waiting for Data or no Data...","dot":false,"ymin":"0","ymax":"","removeOlder":"4","removeOlderPoints":"1000","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1777a1","#ff0000","#2ca02c","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":1,"x":1730,"y":1680,"wires":[[]]},{"id":"368ed0b3.cd394","type":"http request","z":"4486a96.bed6f58","name":"","method":"GET","ret":"obj","paytoqs":false,"url":"","tls":"e8da3135.8ea6b","persist":false,"proxy":"","authType":"","x":830,"y":1240,"wires":[["6f435c96.6c4254"]]},{"id":"883224b2.b3f5a8","type":"http request","z":"4486a96.bed6f58","name":"","method":"POST","ret":"obj","paytoqs":false,"url":"","tls":"bfb7054f.38d938","persist":false,"proxy":"","authType":"","x":950,"y":1340,"wires":[["e002b745.0caef8"]]},{"id":"17660754.9df249","type":"ui_table","z":"4486a96.bed6f58","group":"3bae1f9c.71be1","name":"Clients List Table","order":13,"width":"26","height":"3","columns":[{"field":"clientMac","title":"Client MAC","width":"130","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"ipAddress","title":"Client IP","width":"120","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"apName","title":"AP Name","width":"160","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"hostname","title":"Host Name","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"deviceType","title":"Device Type","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"osType","title":"OS","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"vlan","title":"VLAN","width":"75","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"authStatus","title":"Auth State","width":"130","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"radioType","title":"Radio","width":"80","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"channel","title":"Channel","width":"90","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"rssi","title":"RSSI","width":"80","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"txRxBytes","title":"Traffic (bytes)","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}}],"outputs":1,"cts":true,"x":1730,"y":1380,"wires":[[]]},{"id":"e10680fc.c4d2e","type":"http request","z":"4486a96.bed6f58","name":"","method":"GET","ret":"obj","paytoqs":false,"url":"","tls":"bfb7054f.38d938","persist":false,"proxy":"","authType":"","x":1070,"y":860,"wires":[["16e59c80.37c364"]]},{"id":"1db05f0.76178a1","type":"ui_button","z":"4486a96.bed6f58","name":"","group":"3bae1f9c.71be1","order":2,"width":"26","height":"1","passthru":true,"label":"Refresh Domains/Clear Dashboard","tooltip":"Refresh the Domain list, reset existing selections, clear Zone/WLAN lists and charts.","color":"","bgcolor":"","icon":"","payload":"","payloadType":"str","topic":"Refresh&Clear","x":380,"y":300,"wires":[["db18189.3c948e8","6f1846df.206e58"]]},{"id":"5602df6e.68514","type":"ui_table","z":"4486a96.bed6f58","group":"3bae1f9c.71be1","name":"Domain list table","order":6,"width":"8","height":"4","columns":[{"field":"name","title":"Domains","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}}],"outputs":1,"cts":true,"x":1730,"y":300,"wires":[["db18189.3c948e8","8915b60f.1a6868","c6b32723.0ef988","d744e68f.6754e8"]]},{"id":"c6b32723.0ef988","type":"ui_text","z":"4486a96.bed6f58","group":"3bae1f9c.71be1","order":3,"width":"8","height":"1","name":"Selected Domain text","label":"<font size = 3><font color=grey>Selected Domain: </font>","format":"<font size =4><font color=red>{{msg.payload.name}}</font>","layout":"row-left","x":1720,"y":240,"wires":[],"info":"This has not function apart from putting  text above the AP Zone list"},{"id":"16b5210c.f26d2f","type":"ui_text","z":"4486a96.bed6f58","group":"3bae1f9c.71be1","order":4,"width":"8","height":"1","name":"Selected AP Zone text","label":"<font size = 3><font color=grey>Selected AP Zone: </font>","format":"<font size =4><font color=red>{{msg.payload.name}}</font>","layout":"row-left","x":1720,"y":720,"wires":[],"info":"This has not function apart from putting  text above the AP Zone list"},{"id":"6586c76b.9bcbb8","type":"ui_table","z":"4486a96.bed6f58","group":"3bae1f9c.71be1","name":"AP Zones List Table","order":7,"width":"8","height":"4","columns":[{"field":"name","title":"AP Zones","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}}],"outputs":1,"cts":true,"x":160,"y":580,"wires":[["16b5210c.f26d2f","e05d32de.58dff","d941cd62.374d9","77714e4e.d2c92"]]},{"id":"322e4683.09047a","type":"ui_table","z":"4486a96.bed6f58","group":"3bae1f9c.71be1","name":"Selected Zone AP Health & FW Ver.","order":11,"width":"8","height":"1","columns":[{"field":"onlineCount","title":"Online","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"flaggedCount","title":"Flagged","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"offlineCount","title":"Offline","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"zoneFirmwareVer","title":"FW Version","width":"120","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}}],"outputs":0,"cts":false,"x":1680,"y":680,"wires":[]},{"id":"8991ebf.5acff18","type":"change","z":"4486a96.bed6f58","name":"Remove HTTP payload","rules":[{"t":"delete","p":"url","pt":"msg"},{"t":"delete","p":"headers","pt":"msg"},{"t":"delete","p":"method","pt":"msg"},{"t":"set","p":"topic","pt":"msg","to":"SSID Change Success","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1450,"y":940,"wires":[["1fce0038.bd53f"]],"info":"Removes HTTP URL, Headers and Body else table can't be updated."},{"id":"2d37922f.d476fe","type":"function","z":"4486a96.bed6f58","name":"Send Traffic data","func":"//Define a function to convert returned SZ data timestamp into seconds and apply local time including DST.\nfunction adjustTime() {\n    //Convert the timestamp from returned SZ data to UTC in seconds (the variable used is trafficTime).\n    trafficTime = ((new Date(trafficTime)).getTime());\n\n    //Adjust time SZ trafficTime to local time including DST by using thetzOffsetAdjust value calculated in the node \"Get service ticket/set variables\"\n    var offSet = (flow.get(\"tzOffsetAdjust\") * 60 * 1000); //turn the returned minute value variable into ms\n\n    //If returned offset is negative subtract it from the SZ trafficTime\n    if(offSet < 0){\n        trafficTime = trafficTime - offSet;\n    }\n    //If returned offset is positive subtract it from the SZ trafficTime\n    if(offSet > 0){\n        trafficTime = trafficTime + offSet;\n    }  \n} //End of the function\n\nvar trafficTime;\n\n//Check to see if the client count table has already been populated with historical data\n//If it has, only send latest data from SZ to add new data points to existing graph\nif(flow.get(\"trafficHistoricalDatasent\") === true){\n    //Get index 19 SZ data timestamp\n    trafficTime = (msg.payload.list[19].key);\n\n    //Call the function at the start of this node to do time adjustments on received SZ data time\n    adjustTime()\n\n    //Send traffic totals converted from bytes to MBytes to 2 decimal places\n    var msg4 = {topic: \"Total Traffic\", payload: (msg.payload.list[19].total/ 1024 / 1024).toFixed(2), timestamp: trafficTime};\n    var msg5 = {topic: \"2.4Ghz Traffic\", payload: (msg.payload.list[19].value24/ 1024 / 1024).toFixed(2), timestamp: trafficTime};\n    var msg6 = {topic:\"5Ghz Traffic\",  payload: (msg.payload.list[19].value50/ 1024 / 1024).toFixed(2), timestamp: trafficTime};\n    return [[msg4,msg5,msg6]];\n}\n\nelse {\n    //Set flag that historical data is now sent (this flag is cleared to false by a Dashboard refresh/clear or change of selected WLAN)\n    flow.set(\"trafficHistoricalDatasent\", true);\n    \n    //Set loop counter to number of arrays received from SZ\n    var listCountertotal = msg.payload.totalCount;\n    var listCounter = 0;\n\n    //Prime client count variable array with oldest values from SZ response\n    \n    //Get index 0 SZ data timestamp\n    trafficTime = (msg.payload.list[0].key);\n    //Call the function at the start of this node to do time adjustments on received SZ data time\n    adjustTime()\n\n    var trafficTotal = [{\"x\": trafficTime, \"y\": (msg.payload.list[0].total/ 1024 / 1024).toFixed(2)}];\n    var traffic24G = [{\"x\": trafficTime, \"y\": (msg.payload.list[0].value24/ 1024 / 1024).toFixed(2)}];\n    var traffic5G = [{\"x\": trafficTime, \"y\": (msg.payload.list[0].value50/ 1024 / 1024).toFixed(2)}];\n\n    //Loop through and push remaining 19 datasets into the array\n    for(listCounter = 1; listCounter < listCountertotal; listCounter++)\n        {\n\t        //Get listcounter index SZ data timestamp\n\t        trafficTime = (msg.payload.list[listCounter].key);\n            //Call the function at the start of this node to do time adjustments on received SZ data time\n            adjustTime()\n\t        \n\t        trafficTotal.push({\"x\": trafficTime, \"y\": (msg.payload.list[listCounter].total/ 1024 / 1024).toFixed(2)})\n\t        traffic24G.push({\"x\": trafficTime, \"y\": (msg.payload.list[listCounter].value24/ 1024 / 1024).toFixed(2)})\n\t        traffic5G.push({\"x\": trafficTime, \"y\": (msg.payload.list[listCounter].value50/ 1024 / 1024).toFixed(2)})\n            }\n\nmsg.payload = \n[{\n    \"series\": [\"Total Traffic\", \"2.4Ghz Traffic\", \"5Ghz Traffic\"],\n    \"data\": [trafficTotal,traffic24G,traffic5G]\n}]\nreturn msg;\n}\nreturn;","outputs":1,"noerr":0,"x":1150,"y":1480,"wires":[["6663629a.0d88ac"]]},{"id":"6f435c96.6c4254","type":"function","z":"4486a96.bed6f58","name":"Set Switch state","func":"//This function will extract the selected WLANs schedule state (Always On or Always Off) and then\n//feed it back ito the WLAN Enable/Disable switch to set it correct state\n\nif (msg.payload.schedule.type === \"AlwaysOn\"){\n        msg.payload = true\n}\n    else {\n\t\tmsg.payload = false\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":1040,"y":1240,"wires":[["f0e0aa51.0b02d8"]]},{"id":"e002b745.0caef8","type":"function","z":"4486a96.bed6f58","name":"Send Client Info","func":"//Check if returned Client List = 0 and if so send text to this effect in the Client List box\nif (msg.payload.totalCount === 0) {\n    var noClients = [{\"clientMac\": \"No Clients\"}];\n    msg.topic = \"noClients\"\n    msg.payload = noClients;\n    node.send(msg);\n}\n//Else send the list of client info to the client list box\nelse {\n    msg.payload = msg.payload.list;\n}\nreturn msg;","outputs":1,"noerr":0,"x":1140,"y":1340,"wires":[["17660754.9df249"]]},{"id":"e05d32de.58dff","type":"function","z":"4486a96.bed6f58","name":"Get WLANs","func":"var url = flow.get(\"szAddress\") + \"/wsg/api/public/v9_0/rkszones/\" + msg.payload.id + \"/wlans?serviceTicket=\";\nmsg.url = url.concat(flow.get(\"serviceTicket\"));\n\nmsg.headers = {};\n    msg.headers[\"Content-Type\"]=\"application/json;charset=UTF-8\";\n    msg.headers[\"Cookie\"]=\"JSESSIONID=\"+flow.get(\"VsZSessionCookie\");\n\n//Read the WLANs and SSIDs of the Zone clicked in the Zone table\n//msg.payload.id contains the Zone ID to use in the request\n    flow.set(\"zoneID\", msg.payload.id);\n    flow.set(\"zoneName\", msg.payload.name);\nreturn msg;","outputs":1,"noerr":0,"x":850,"y":860,"wires":[["e10680fc.c4d2e"]]},{"id":"6f1846df.206e58","type":"function","z":"4486a96.bed6f58","name":"Get Domains","func":"//API call to get Domain list\nmsg.url = flow.get(\"szAddress\").concat(\"/wsg/api/public/v9_0/domains?serviceTicket=\");\nmsg.url = msg.url.concat(flow.get(\"serviceTicket\"));\n\nmsg.headers = {};\n    msg.headers[\"Content-Type\"]=\"application/json;charset=UTF-8\";\n    msg.headers[\"Cookie\"]=\"JSESSIONID=\"+flow.get(\"vSZSessionCookie\");\n\nreturn msg;","outputs":1,"noerr":0,"x":790,"y":300,"wires":[["839a85f0.fc9c88"]]},{"id":"e15c08dc.511ab8","type":"function","z":"4486a96.bed6f58","name":"Send Domain Info","func":"//Send Domain list data to table\nmsg.payload = msg.payload.list;\nnode.send([msg]);\n\n//Then set domain list sort order by Name after 300ms seconds to allow table to be populated first\nsetTimeout(function(){\n    msg.payload = {\n        \"command\":\"setSort\",\n    \"arguments\":[\n\t\t[{\n\t\t\t\"column\":\"name\",\"dir\":\"asc\"\n\t\t},]\n\t],\n}\nnode.send([msg]);\n\t},300);\nreturn","outputs":1,"noerr":0,"x":1410,"y":300,"wires":[["5602df6e.68514"]]},{"id":"8915b60f.1a6868","type":"function","z":"4486a96.bed6f58","name":"Get AP Zones","func":"//Read the AP Zones of the Domain clicked in the Domain table\n//msg.payload.id contains the Domain to use in the request\n\nflow.set(\"domainID\", msg.payload.id);\nflow.set(\"domainName\", msg.payload.name);\n\nvar url = flow.get(\"szAddress\") + \"/wsg/api/public/v9_0/rkszones?domainId=\"+msg.payload.id+\"&serviceTicket=\";\nmsg.url = url.concat(flow.get(\"serviceTicket\"));\n\nmsg.headers = {};\n    msg.headers[\"Content-Type\"]=\"application/json;charset=UTF-8\";\n    msg.headers[\"Cookie\"]=\"JSESSIONID=\"+flow.get(\"VsZSessionCookie\");\n\nreturn msg;","outputs":1,"noerr":0,"x":780,"y":520,"wires":[["a594a3ae.37d68"]]},{"id":"d941cd62.374d9","type":"function","z":"4486a96.bed6f58","name":"Get AP Health Status","func":"msg.url = flow.get(\"szAddress\").concat(\"/wsg/api/public/v9_0/health/status/ap?serviceTicket=\");\nmsg.url = msg.url.concat(flow.get(\"serviceTicket\"));\n\nmsg.headers = {};\n    msg.headers[\"Content-Type\"]=\"application/json;charset=UTF-8\";\n    msg.headers[\"Cookie\"]=\"JSESSIONID=\"+flow.get(\"vSZSessionCookie\");\nmsg.topic = \"apHealth\"\nmsg.payload = {\n    \"filters\":\n        [{\"type\":\"DOMAIN\",\"value\":flow.get(\"domainID\")}],\n\t    \"extraFilters\":[{\"type\":\"ZONE\",\"value\":flow.get(\"zoneID\")}],\n\t    \"extraNotFilters\":[{\"type\":\"MONITORINGENABLED\",\"value\":\"true\"}],\n\t\t\"options\":{},\n\t    \"limit\":10,\n\t    \"page\":1\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":520,"y":620,"wires":[["ced953d1.dff3f"]]},{"id":"77714e4e.d2c92","type":"function","z":"4486a96.bed6f58","name":"Get Zone Firmware Ver.","func":"msg.url = flow.get(\"szAddress\").concat(\"/wsg/api/public/v9_0/rkszones/\" + (flow.get(\"zoneID\")) +\"/apFirmware?serviceTicket=\");\nmsg.url = msg.url.concat(flow.get(\"serviceTicket\"));\n\nmsg.topic=\"fwVer\"\nmsg.headers = {};\n    msg.headers[\"Content-Type\"]=\"application/json;charset=UTF-8\";\n    msg.headers[\"Cookie\"]=\"JSESSIONID=\"+flow.get(\"vSZSessionCookie\");\n\nmsg.payload = {}\n\nreturn msg;","outputs":1,"noerr":0,"x":530,"y":720,"wires":[["1f47c6e8.f4be39"]]},{"id":"27fcad14.70f5c2","type":"function","z":"4486a96.bed6f58","name":"Send AP Zone Info","func":"//Check if returned AP Zone = 0 and if so send text reflecting this in the list box\nif (msg.payload.totalCount === 0) {\n    var noAPzones = [{\"name\": \"No AP Zones in the selected Domain\"}];\n    msg.topic = \"noAPzones\"\n    msg.payload = noAPzones;\n    node.send(msg);\n}\n//Else send the list of AP Zones for the selected Domain to the list box\nelse {\n    msg.payload = msg.payload.list;\n}\nnode.send([msg]);\n\n//Then set AP Zone list sort order by Name after 300ms to allow table to be populated first\nsetTimeout(function(){\n    msg.payload = {\n        \"command\":\"setSort\",\n    \"arguments\":[\n\t\t[{\n\t\t\t\"column\":\"name\",\"dir\":\"asc\"\n\t\t},]\n\t],\n}\nnode.send([msg]);\n\t},300);\nreturn","outputs":1,"noerr":0,"x":1410,"y":520,"wires":[["6586c76b.9bcbb8"]]},{"id":"53a73e07.0242e","type":"function","z":"4486a96.bed6f58","name":"Send AP Health & FW Ver.","func":"if(msg.topic === \"apHealth\"){\nflow.set(\"apOnline\", msg.payload.onlineCount);\nflow.set(\"apFlagged\", msg.payload.flaggedCount);\nflow.set(\"apOffline\", msg.payload.offlineCount);\n}\n\nif(msg.topic === \"fwVer\"){\nflow.set(\"zoneFWver\", msg.payload.list[0].firmwareVersion);\n}\n\n\nflow.set(\"zoneStatus\", [{\"zoneFirmwareVer\": flow.get(\"zoneFWver\"), \"onlineCount\": flow.get(\"apOnline\"), \"flaggedCount\": flow.get(\"apFlagged\"),\"offlineCount\": flow.get(\"apOffline\")}]);\n\n\nmsg.payload = flow.get(\"zoneStatus\");\n\nreturn msg;\n\n\n// msg.payload = {\n //  \"command\":\"updateData\",\n  //  \"arguments\":[\n//\t\t[{\n//\t\t\t\"id\":flow.get(\"wlanID\"), //WLAN ID from original WLAN request and required to update correct row\n//\t\t\t\"ssid\":newSSIDname //Set the new SSID name\n//\t\t},]\n//\t],\n//}\n//node.send([msg, null, null, null, null]);\n\n","outputs":1,"noerr":0,"x":1300,"y":680,"wires":[["322e4683.09047a"]]},{"id":"8b3a09ff.380798","type":"function","z":"4486a96.bed6f58","name":"Set SSID","func":"//Check if message received from the \"name too long\" warning notification pop-up.\n//If it did then exit function without changing the current SSID name.\nif(msg.topic === \"The New SSID is Too Long.\") {\n    return;\n}\n\n//Check length of new SSID name is 32 or less characters.\n//If it is greater then pop-up Notification sent out of port 3 with a warning message to re-enter.\nvar newSSIDname = msg.payload;\nvar lengthSSID = newSSIDname.length;\n\nif (lengthSSID > 32) {\n    msg.payload = \"New SSID name is greater than 32 characters. Please re-enter.\";\nreturn [null, null, msg, null, null];\n}\n\n//If SSID length is Ok then update SSID name variable & send payload  out of port 2 to the SZ.\nelse {\n    msg.url = flow.get(\"szAddress\").concat(\"/wsg/api/public/v9_0/rkszones/\"+flow.get(\"zoneID\")+\"/wlans/\"+flow.get(\"wlanID\")+\"?serviceTicket=\");\n    msg.url = msg.url.concat(flow.get(\"serviceTicket\"));\n\n    msg.headers = {};\n    msg.headers[\"Content-Type\"]=\"application/json;charset=UTF-8\";\n    msg.headers[\"Cookie\"]=\"JSESSIONID=\"+flow.get(\"vSZSessionCookie\");\n\n    msg.method = 'PATCH'; //Required method for updating SSID name & can't set it in HTTP request node.\n        msg.payload = {\n        \"ssid\": newSSIDname\n        }\n        node.send ([null, msg, null, null, null]);\n}\n\n//section to update SSID name in the WLAN list table cell sent out of port 1\n msg.payload = {\n   \"command\":\"updateData\",\n    \"arguments\":[\n\t\t[{\n\t\t\t\"id\":flow.get(\"wlanID\"), //WLAN ID from original WLAN request and required to update correct row\n\t\t\t\"ssid\":newSSIDname //Set the new SSID name\n\t\t},]\n\t],\n}\nnode.send([msg, null, null, null, null]);\n\n//Send succesful SSID update pop-up Notification to screen out of port 4\nvar oldSSIDname = flow.get(\"ssidName\");\nvar currentWLANname = flow.get(\"wlanName\");\nflow.set(\"ssidName\", newSSIDname);\n\n//One way to include text string and variables in message payload:\n//msg.payload = \"The SSID has been successfully updated from:  \"+oldSSIDname +\"  to:  \" +newSSIDname;\n\n//I'm using this method though so can format the SSID Names using HTML\nmsg.payload = '<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\"><link></head><script></script><body>The SSID for the selected WLAN <B> '+currentWLANname+' </B> has been successfully updated <BR><BR> from: <B> '+oldSSIDname+' </B> <BR><BR> to: <B> '+newSSIDname+' </BR> </body></html>';\n\nnode.send([null, null, null, msg, null]);\n\n//Send message to clear text in the \"Enter new SSID for selected WLAN...\" input field sent out of port 5\nmsg.payload = null;\nreturn [null, null, null, null, msg];\n","outputs":5,"noerr":0,"x":1460,"y":1040,"wires":[["8991ebf.5acff18"],["3e2d4b2b.f25ca4"],["af37be4c.2121d"],["dcafeb9a.f8db78"],["b4f29ccb.23cfd"]],"outputLabels":["SSID name <= 32 chars. Update WLAN table","SSID name <= 32 chars. Ok to send to SZ","SSID name > 32 chars. Flag warning notification","SSID name <= 32 chars. Pop-up Change OK Notification","SSID name <= 32 chars. Clear the enter new SSID field"]},{"id":"f0e0aa51.0b02d8","type":"ui_switch","z":"4486a96.bed6f58","name":"Enable / Disable WLAN","label":"<B>Toggle selected WLAN state</B>","tooltip":"","group":"3bae1f9c.71be1","order":14,"width":"10","height":"1","passthru":true,"decouple":"false","topic":"","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","x":1290,"y":1240,"wires":[["42fb53a8.80e16c"]]},{"id":"839a85f0.fc9c88","type":"http request","z":"4486a96.bed6f58","name":"","method":"GET","ret":"obj","paytoqs":false,"url":"","tls":"bfb7054f.38d938","persist":false,"proxy":"","authType":"","x":1130,"y":300,"wires":[["e15c08dc.511ab8"]]},{"id":"a594a3ae.37d68","type":"http request","z":"4486a96.bed6f58","name":"","method":"GET","ret":"obj","paytoqs":false,"url":"","tls":"bfb7054f.38d938","persist":false,"proxy":"","authType":"","x":1130,"y":520,"wires":[["27fcad14.70f5c2"]]},{"id":"ced953d1.dff3f","type":"http request","z":"4486a96.bed6f58","name":"","method":"POST","ret":"obj","paytoqs":false,"url":"","tls":"bfb7054f.38d938","persist":false,"proxy":"","authType":"","x":950,"y":620,"wires":[["53a73e07.0242e"]]},{"id":"1f47c6e8.f4be39","type":"http request","z":"4486a96.bed6f58","name":"","method":"GET","ret":"obj","paytoqs":false,"url":"","tls":"bfb7054f.38d938","persist":false,"proxy":"","authType":"","x":950,"y":720,"wires":[["53a73e07.0242e"]]},{"id":"b4f29ccb.23cfd","type":"ui_text_input","z":"4486a96.bed6f58","name":"Change SSID name","label":"<B>Enter new SSID for selected WLAN here</B> (max. 32 chars.) <B>& press Enter</B>","tooltip":"","group":"3bae1f9c.71be1","order":15,"width":"10","height":"1","passthru":false,"mode":"text","delay":"0","topic":"","x":1200,"y":1120,"wires":[["8b3a09ff.380798"]]},{"id":"3e2d4b2b.f25ca4","type":"http request","z":"4486a96.bed6f58","name":"","method":"use","ret":"txt","paytoqs":false,"url":"","tls":"bfb7054f.38d938","persist":false,"proxy":"","authType":"","x":1750,"y":1020,"wires":[[]]},{"id":"af37be4c.2121d","type":"ui_toast","z":"4486a96.bed6f58","position":"dialog","displayTime":"3","highlight":"red","sendall":true,"outputs":1,"ok":"OK","cancel":"","raw":false,"topic":"The New SSID is Too Long.","name":"SSID name >32 chars. ?","x":1710,"y":1140,"wires":[["8b3a09ff.380798"]]},{"id":"42fb53a8.80e16c","type":"function","z":"4486a96.bed6f58","name":"toggle WLAN","func":"var zoneID = flow.get(\"zoneID\")\nvar wlanID = flow.get(\"wlanID\")\n\nmsg.url = flow.get(\"szAddress\").concat(\"/wsg/api/public/v9_0/rkszones/\"+flow.get(\"zoneID\")+\"/wlans/\"+flow.get(\"wlanID\")+\"?serviceTicket=\");\nmsg.url = msg.url.concat(flow.get(\"serviceTicket\"));\n\nmsg.headers = {};\n    msg.headers[\"Content-Type\"]=\"application/json;charset=UTF-8\";\n    msg.headers[\"Cookie\"]=\"JSESSIONID=\"+flow.get(\"vSZSessionCookie\");\n\nmsg.method = 'PATCH'; //Required method for this operation and can't set it in HTTP request node.\nif (msg.payload === true){\n\n        msg.payload = {\n\t\t\t\"schedule\": {\n\t\t\t\t\"type\" : \"AlwaysOn\"\n    \t\t\t}\n        }\n}\n    else {\n\t\tmsg.payload = {\n            \"schedule\": {\n\t\t\t\t\"type\" : \"AlwaysOff\"\n\t\t\t}\n\t    }\n}\nreturn msg;","outputs":1,"noerr":0,"x":1550,"y":1240,"wires":[["533e757e.929e4c"]]},{"id":"533e757e.929e4c","type":"http request","z":"4486a96.bed6f58","name":"","method":"use","ret":"txt","paytoqs":false,"url":"","tls":"bfb7054f.38d938","persist":false,"proxy":"","authType":"","x":1750,"y":1240,"wires":[[]]},{"id":"dcafeb9a.f8db78","type":"ui_toast","z":"4486a96.bed6f58","position":"dialog","displayTime":"3","highlight":"red","sendall":true,"outputs":1,"ok":"OK","cancel":"","raw":true,"topic":"","name":"SSID Name Succesfully Changed","x":1680,"y":1180,"wires":[[]]},{"id":"4c740988.7f2d28","type":"ui_button","z":"4486a96.bed6f58","name":"","group":"3bae1f9c.71be1","order":12,"width":"26","height":"1","passthru":false,"label":"Refresh Client List (auto-updates every 1 minute)","tooltip":"","color":"","bgcolor":"","icon":"","payload":"","payloadType":"str","topic":"","x":250,"y":1340,"wires":[["df715a35.325978"]]},{"id":"d744e68f.6754e8","type":"function","z":"4486a96.bed6f58","name":"Get Sub-Domains","func":"//API call to get Sub-Domain list based on selected Domain\nmsg.url = flow.get(\"szAddress\").concat(\"/wsg/api/public/v9_0/domains/\" + (flow.get(\"domainID\")) +\"/subdomain?recursively=True&serviceTicket=\");\nmsg.url = msg.url.concat(flow.get(\"serviceTicket\"));\n\nmsg.headers = {};\n    msg.headers[\"Content-Type\"]=\"application/json;charset=UTF-8\";\n    msg.headers[\"Cookie\"]=\"JSESSIONID=\"+flow.get(\"vSZSessionCookie\");\n\nreturn msg;","outputs":1,"noerr":0,"x":790,"y":400,"wires":[["36398b5a.dc1a64"]]},{"id":"36398b5a.dc1a64","type":"http request","z":"4486a96.bed6f58","name":"","method":"GET","ret":"obj","paytoqs":false,"url":"","tls":"bfb7054f.38d938","persist":false,"proxy":"","authType":"","x":1130,"y":400,"wires":[["ab8e9096.3b8d5"]]},{"id":"ab8e9096.3b8d5","type":"function","z":"4486a96.bed6f58","name":"Send Sub-Domain Info","func":"//Send Sub-Domain list data to table\n\n//Check if returned Sub-Domain list = 0 and if so send text to this effect in the list box\nif (msg.payload.totalCount === 0) {\n    var noSubDomain = [{\"name\": \"No Sub-Domain(s) in the selected Domain\"}];\n    msg.topic = \"noSubDomain\"\n    msg.payload = noSubDomain;\n    node.send(msg);\n}\n//Else send the list of Sub-Domains for the selected Domain to the list box\nelse {\n    msg.payload = msg.payload.list;\n}\nnode.send([msg]);\n\n//Now set the Sub-Domain list sort order by WLAN Name (ssid) after 300ms to allow table to be populated first\nsetTimeout(function(){\n        msg.payload = {\n        \"command\":\"setSort\",\n        \"arguments\":[\n    [{\n\t\t\"column\":\"name\",\"dir\":\"asc\"\n\t},]\n    ],\n}\nnode.send([msg]);\n},300);\nreturn","outputs":1,"noerr":0,"x":1420,"y":400,"wires":[["da6f6c8f.d603f"]]},{"id":"da6f6c8f.d603f","type":"ui_table","z":"4486a96.bed6f58","group":"3bae1f9c.71be1","name":"Sub-Domain list table","order":9,"width":"8","height":"2","columns":[{"field":"name","title":"Sub-Domain(s)  - select to filter associated AP Zone(s)","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}}],"outputs":1,"cts":true,"x":1720,"y":400,"wires":[["8915b60f.1a6868"]]},{"id":"73b5aa05.352804","type":"comment","z":"4486a96.bed6f58","name":"Populate Sub-Domain list table for selected Domain","info":"","x":890,"y":360,"wires":[]},{"id":"d7946efc.c6649","type":"comment","z":"4486a96.bed6f58","name":"Send Clear Data to all Tables & Charts","info":"","x":490,"y":840,"wires":[]},{"id":"a95c7e1b.5275","type":"function","z":"4486a96.bed6f58","name":"Set New Flow Vars for selected WLAN","func":"flow.set(\"zoneID\", msg.payload.zoneId);\nflow.set(\"wlanID\", msg.payload.id);\nflow.set(\"wlanName\", msg.payload.name);\nflow.set(\"ssidName\", msg.payload.ssid);\n\n//Set current date and time stamp as flow variable for other nodes to use\nvar dateTime = new Date();\nflow.set(\"currentTime\",dateTime.getTime());\n\n//Set flags that historical traffic and client count data has not yet been sent to the respective graphs\nflow.set(\"trafficHistoricalDatasent\", false);\nflow.set(\"clientHistoricalDatasent\", false);\n\nreturn msg;","outputs":1,"noerr":0,"x":210,"y":1100,"wires":[["eaeb54cf.807038","3a910167.58844e","df715a35.325978","f633865e.2f9808"]]},{"id":"6f485e23.919ab","type":"comment","z":"4486a96.bed6f58","name":"Populate Client detail list","info":"","x":670,"y":1340,"wires":[]},{"id":"17555ba3.6adbb4","type":"inject","z":"4486a96.bed6f58","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"onceDelay":"2","x":130,"y":300,"wires":[["1db05f0.76178a1"]]},{"id":"deeed94e.08d2a8","type":"function","z":"4486a96.bed6f58","name":"Send  Client Count","func":"//Define a function to convert returned SZ data timestamp into seconds and apply local time including DST.\nfunction adjustTime() {\n    //Convert the timestamp from returned SZ data to UTC in seconds (the variable used is clientCountTime).\n    clientCountTime = ((new Date(clientCountTime)).getTime());\n\n    //Adjust time SZ clientCountTime to local time including DST by using thetzOffsetAdjust value calculated in the node \"Get service ticket/set variables\"\n    var offSet = (flow.get(\"tzOffsetAdjust\") * 60 * 1000); //turn the returned minute value variable into ms\n\n    //If returned offset is negative subtract it from the SZ clientCountTime\n    if(offSet < 0){\n        clientCountTime = clientCountTime - offSet;\n    }\n    //If returned offset is positive subtract it from the SZ clientCountTime\n    if(offSet > 0){\n        clientCountTime = clientCountTime + offSet;\n    }  \n} //End of the function\n\nvar clientCountTime;\n\n//Check to see if the client count table has already been populated with historical data\n//If it has, only send latest data from SZ to add new data points to existing graph\nif(flow.get(\"clientHistoricalDatasent\") === true){\n    //Get index 19 SZ data timestamp\n    clientCountTime = (msg.payload.list[19].key);\n    //Call the function at the start of this node to do time adjustments on received SZ data time\n    adjustTime()\n\n    //Send client count values\n    var msg4 = {topic: \"Total Clients\", payload: msg.payload.list[19].total, timestamp: clientCountTime};\n    var msg5 = {topic: \"2.4Ghz Clients\", payload: msg.payload.list[19].value24, timestamp: clientCountTime};\n    var msg6 = {topic:\"5Ghz Clients\", payload: msg.payload.list[19].value50, timestamp: clientCountTime};\n    return [[msg4,msg5,msg6]];\n}\n\nelse {\n    //Set flag that historical data is now sent (this flag is cleared to false by a Dashboard refresh/clear or change of selected WLAN)\n    flow.set(\"clientHistoricalDatasent\", true);\n\n    //Set loop counter to number of arrays received from SZ\n    var listCountertotal = msg.payload.totalCount;\n    var listCounter = 0;\n\n    //Prime client count variable array with oldest values from SZ response\n    \n    //Get index 0 SZ data timestamp\n    clientCountTime = (msg.payload.list[0].key);\n    //Call the function at the start of this node to do time adjustments on received SZ data time\n    adjustTime()\n\n    var clientsTotal = [{\"x\": clientCountTime, \"y\": msg.payload.list[0].total}];\n    var clients24G = [{\"x\": clientCountTime, \"y\": msg.payload.list[0].value24}];\n    var clients5G = [{\"x\": clientCountTime, \"y\": msg.payload.list[0].value50}];\n\n    //Loop through and push remaining 19 datasets into the array\n    for(listCounter = 1; listCounter < listCountertotal; listCounter++)\n        {\n\t        //Get listcounter index SZ data timestamp\n\t        clientCountTime = (msg.payload.list[listCounter].key);\n            //Call the function at the start of this node to do time adjustments on received SZ data time\n            adjustTime()\n\t        \n\t        clientsTotal.push({\"x\": clientCountTime, \"y\": msg.payload.list[listCounter].total})\n\t        clients24G.push({\"x\": clientCountTime, \"y\": msg.payload.list[listCounter].value24})\n\t        clients5G.push({\"x\": clientCountTime, \"y\": msg.payload.list[listCounter].value50})\n            }\n\nmsg.payload = \n[{\n    \"series\": [\"Total Clients\", \"2.4Ghz Clients\", \"5Ghz Clients\"],\n    \"data\": [clientsTotal,clients24G,clients5G]\n}]\nreturn msg;\n}\nreturn;","outputs":1,"noerr":0,"x":1150,"y":1640,"wires":[["e7a28f75.70528"]]},{"id":"dc88842a.8a3bc8","type":"inject","z":"4486a96.bed6f58","name":"Periodic Stat Update - 1 minute","topic":"","payload":"","payloadType":"date","repeat":"60","crontab":"","once":false,"onceDelay":"2","x":190,"y":1380,"wires":[["df715a35.325978"]]},{"id":"bfb7054f.38d938","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","certname":"","keyname":"","caname":"","verifyservercert":false},{"id":"49cfd7e5.17fbf8","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","certname":"","keyname":"","caname":"","verifyservercert":false},{"id":"3bae1f9c.71be1","type":"ui_group","z":"","name":"SmartZone Dashboard","tab":"bb67bcd0.6c903","order":1,"disp":false,"width":"26","collapse":false},{"id":"e8da3135.8ea6b","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","certname":"","keyname":"","caname":"","verifyservercert":false},{"id":"bb67bcd0.6c903","type":"ui_tab","z":"","name":"SmartZone Dashboard","icon":"dashboard","order":3,"disabled":false,"hidden":false}]